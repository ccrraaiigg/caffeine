'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = importScripts;

var _path = require('path');

var _vm = require('vm');

var _fs = require('fs');

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var NetworkError = function (_Error) {
  _inherits(NetworkError, _Error);

  function NetworkError() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, NetworkError);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = NetworkError.__proto__ || Object.getPrototypeOf(NetworkError)).call.apply(_ref, [this].concat(args))), _this), _this.name = 'NetworkError', _temp), _possibleConstructorReturn(_this, _ret);
  }

  return NetworkError;
}(Error);

function importScripts() {
  for (var _len2 = arguments.length, scripts = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
    scripts[_key2] = arguments[_key2];
  }

  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = scripts[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var script = _step.value;

      var filepath = void 0,
          code = void 0;

      try {
        filepath = (0, _path.resolve)(script);
      } catch (error) {
        throw new SyntaxError(error.message);
      }

      try {
        code = (0, _fs.readFileSync)(filepath, 'utf-8');
      } catch (error) {
        throw new NetworkError(error.message);
      }

      (0, _vm.runInThisContext)(code, { filename: filepath });
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator.return) {
        _iterator.return();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }
}
//# sourceMappingURL=index.js.map